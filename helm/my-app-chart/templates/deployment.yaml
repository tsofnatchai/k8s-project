apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "my-app-chart.fullname" . }}
  labels:
    {{- include "my-app-chart.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "my-app-chart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "my-app-chart.labels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "my-app-chart.serviceAccountName" . }}
      containers:
        - name: consumer
          image: "{{ .Values.consumer_image.repository }}:{{ .Values.consumer_image.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 5672  # RabbitMQ communication port
          command: ["python", "consumer.py", "-p", "5672", "-s", "rabbitmq"]

        - name: producer
          image: "{{ .Values.producer_image.repository }}:{{ .Values.producer_image.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 5672  # RabbitMQ communication port
          env:
            - name: RABBITMQ_USER
              valueFrom:
                configMapKeyRef:
                  name: rabbitmq-config-{{ .Release.Name }}  # Assuming you define RabbitMQ user and password in a ConfigMap
                  key: user
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-secret-{{ .Release.Name }}  # Unique Secret for each release
                  key: password
          command: ["python", "producer.py", "-p", "5672", "-s", "rabbitmq", "-m", "Hello", "-r", "30"]

      {{- with .Values.securityContext }}
      securityContext:
        {{- toYaml . | nindent 12 }}
      {{- end }}
      {{- with .Values.resources }}
      {{- end }}

